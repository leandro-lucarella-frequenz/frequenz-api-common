{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz Common API","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Frequenz common gRPC API and bindings</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to know how to build this project and contribute to it, please check out the Contributing Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Frequenz Common API","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You need to make sure you have the <code>git submodules</code> updated:</p> <pre><code>git submodule update --init\n</code></pre>"},{"location":"CONTRIBUTING/#running-protolint","title":"Running protolint","text":"<p>To make sure some common mistakes are avoided and to ensure a consistent style it is recommended to run <code>protolint</code>. After you installed <code>protolint</code>, just run:</p> <pre><code>protolint lint proto\n</code></pre>"},{"location":"CONTRIBUTING/#python-setup","title":"Python setup","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>This will also generate the Python files from the <code>proto/</code> files and leave them in <code>py/</code>, so you can inspect them.</p> <p>Or you can install all development dependencies (<code>mypy</code>, <code>pylint</code>, <code>pytest</code>, etc.) in one go too: <pre><code>python -m pip install -e .[dev]\n</code></pre></p> <p>If you don't want to install all the dependencies, you can also use <code>nox</code> to run the tests and other checks creating its own virtual environments:</p> <pre><code>python -m pip install .[dev-noxfile]\nnox\n</code></pre> <p>You can also use <code>nox -R</code> to reuse the current testing environment to speed up test at the expense of a higher chance to end up with a dirty test environment.</p>"},{"location":"CONTRIBUTING/#upgrading-dependencies","title":"Upgrading dependencies","text":"<p>If you want to update the dependency <code>frequenz-api-common</code>, then you need to:</p> <ol> <li>Update the submodule <code>frequenz-api-common</code></li> <li>Update the version of the <code>frequenz-api-common</code> package in <code>pyproject.toml</code></li> </ol> <p>The version of <code>frequenz-api-common</code> used in both places mentioned above should be the same.</p> <p>Here is an example of upgrading the <code>frequenz-api-common</code> dependency to version <code>v0.2.0</code>: <pre><code>ver=\"0.2.0\"\ncd submodules/frequenz-api-common\ngit remote update\ngit checkout v${ver}\ncd -\n\nsed s/\"frequenz-api-common == [0-9]\\.[0-9]\\.[0-9]\"/\"frequenz-api-common == ${ver}\"/g -i pyproject.toml\n</code></pre></p>"},{"location":"CONTRIBUTING/#running-tests-checks-individually","title":"Running tests / checks individually","text":"<p>For a better development test cycle you can install the runtime and test dependencies and run <code>pytest</code> manually.</p> <pre><code>python -m pip install .[dev-pytest]  # included in .[dev] too\n# And for example\npytest tests/test_*.py\n</code></pre> <p>Or you can use <code>nox</code>:</p> <pre><code>nox -R -s pytest -- test/test_*.py\n</code></pre> <p>The same appliest to <code>pylint</code> or <code>mypy</code> for example:</p> <pre><code>nox -R -s pylint -- test/test_*.py\nnox -R -s mypy -- test/test_*.py\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, first install the dependencies (if you didn't install all <code>dev</code> dependencies):</p> <pre><code>python -m pip install -e .[dev-mkdocs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    remove template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit a pull    request if an update is needed, wait until it is merged, and update the    latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s --cleanup=whitespace -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    and upload a new package to    PyPI    automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Protobuf API Reference</li> <li>Python API Reference</li> <li>Contributing</li> </ul>"},{"location":"protobuf-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>common<ul> <li>components.proto</li> <li>location.proto</li> <li>metrics<ul> <li>electrical.proto</li> </ul> </li> <li>metrics.proto</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"protobuf-reference/frequenz/api/common/components/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/components/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/components.proto</p> <ul> <li>BatteryType</li> <li>ComponentCategory</li> <li>EvChargerType</li> <li>InverterType</li> <li>SensorType</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/components/#frequenzapicommoncomponentsproto","title":"frequenz/api/common/components.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/components/#batterytype","title":"BatteryType","text":"<p>Enumerated battery types.</p> Name Number Description BATTERY_TYPE_UNSPECIFIED 0 Unspecified. BATTERY_TYPE_LI_ION 1 Li-ion batteries. BATTERY_TYPE_NA_ION 2 Sodium-ion batteries <p></p>"},{"location":"protobuf-reference/frequenz/api/common/components/#componentcategory","title":"ComponentCategory","text":"<p>Enumrated component categories.</p> Name Number Description COMPONENT_CATEGORY_UNSPECIFIED 0 An unknown component categories, useful for error handling, and marking unknown components in a list of components with otherwise known categories. COMPONENT_CATEGORY_GRID 1 The point where the local microgrid is connected to the grid. COMPONENT_CATEGORY_METER 2 A meter, for measuring electrical metrics, e.g., current, voltage, etc. COMPONENT_CATEGORY_INVERTER 3 An electricity generator, with batteries or solar energy. COMPONENT_CATEGORY_CONVERTER 4 A DC-DC converter. COMPONENT_CATEGORY_BATTERY 5 A storage system for electrical energy, used by inverters. COMPONENT_CATEGORY_EV_CHARGER 6 A station for charging electrical vehicles. COMPONENT_CATEGORY_SENSOR 7 A sensor for measuring ambient metrics, e.g., temperature, humidity, etc. COMPONENT_CATEGORY_CRYPTO_MINER 8 A crypto miner. COMPONENT_CATEGORY_ELECTROLYZER 9 An electrolyzer for converting water into hydrogen and oxygen. COMPONENT_CATEGORY_CHP 10 A heat and power combustion plant (CHP stands for combined heat and power). COMPONENT_CATEGORY_RELAY 11 A relay. Relays generally have two states: open (connected) and closed (disconnected). They are generally placed in front of a component, e.g., an inverter, to control whether the component is connected to the grid or not. COMPONENT_CATEGORY_PRECHARGE_MODULE 12 A precharge module. Precharging involves gradually ramping up the DC voltage to prevent any potential damage to sensitive electrical components like capacitors. While many inverters and batteries come equipped with in-built precharging mechanisms, some may lack this feature. In such cases, we need to use external precharging modules. <p></p>"},{"location":"protobuf-reference/frequenz/api/common/components/#evchargertype","title":"EvChargerType","text":"<p>Enumerated EV charger types.</p> Name Number Description EV_CHARGER_TYPE_UNSPECIFIED 0 Default type. EV_CHARGER_TYPE_AC 1 The EV charging station supports AC charging only. EV_CHARGER_TYPE_DC 2 The EV charging station supports DC charging only. EV_CHARGER_TYPE_HYBRID 3 The EV charging station supports both AC and DC. <p></p>"},{"location":"protobuf-reference/frequenz/api/common/components/#invertertype","title":"InverterType","text":"<p>Enumerated inverter types.</p> Name Number Description INVERTER_TYPE_UNSPECIFIED 0 Unspecified. INVERTER_TYPE_BATTERY 1 Battery inverter. INVERTER_TYPE_SOLAR 2 Solar inverter. INVERTER_TYPE_HYBRID 3 Hybrid inverter. <p></p>"},{"location":"protobuf-reference/frequenz/api/common/components/#sensortype","title":"SensorType","text":"<p>Enumerated sensor types.</p> Name Number Description SENSOR_TYPE_UNSPECIFIED 0 Unspecified SENSOR_TYPE_THERMOMETER 1 Thermometer (temperature sensor) SENSOR_TYPE_HYGROMETER 2 Hygrometer (humidity sensor) SENSOR_TYPE_BAROMETER 3 Barometer (pressure sensor). SENSOR_TYPE_PYRANOMETER 4 Pyranometer (solar irradiance sensor). SENSOR_TYPE_ANEMOMETER 5 Anemometer (wind velocity and direction sensor). SENSOR_TYPE_ACCELEROMETER 6 Accelerometers (acceleration sensor). SENSOR_TYPE_GENERAL 7 General sensors, which do not fall in any of the above categories"},{"location":"protobuf-reference/frequenz/api/common/components/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/common/location/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/location/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/location.proto</p> <ul> <li>Location</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/location/#frequenzapicommonlocationproto","title":"frequenz/api/common/location.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/location/#location","title":"Location","text":"<p>A pair of geographical co-ordinates, representing the location of a place.</p> Field Type Label Description latitude float Latitude ranges from -90 (South) to 90 (North) longitude float Longitude ranges from -180 (West) to 180 (East) country_code string Country ISO 3166-1 Alpha 2"},{"location":"protobuf-reference/frequenz/api/common/location/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/common/metrics/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/metrics/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/metrics.proto</p> <ul> <li>Bounds</li> <li>Metric</li> <li>MetricAggregation</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/#frequenzapicommonmetricsproto","title":"frequenz/api/common/metrics.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/metrics/#bounds","title":"Bounds","text":"<p>A set of lower and upper bounds for any metric. The units of the bounds are always the same as the related metric.</p> Field Type Label Description lower float The lower bound. upper float The upper bound. <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/#metric","title":"Metric","text":"<p>A metric's value, with optional limits.</p> Field Type Label Description value float The current value of the metric. rated_bounds Bounds The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system. component_bounds Bounds The current bounds of the metric, as imposed by the component this metric originates from. system_exclusion_bounds Bounds These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &amp;lt;= lower</code> OR <code>upper &amp;lt;= value</code>. <p>It is important to note that these bounds work together with <code>system_inclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <code>inclusion.lower inclusion.upper &amp;lt;-------|============|------------------|============|---------&amp;gt; exclusion.lower exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted | | system_inclusion_bounds | Bounds |  | These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &amp;lt;= value &amp;lt;= upper</code></p> <p>It is important to note that these bounds work together with <code>system_exclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <code>inclusion.lower inclusion.upper &amp;lt;-------|============|------------------|============|---------&amp;gt; exclusion.lower exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted |</p> <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/#metricaggregation","title":"MetricAggregation","text":"<p>Metrics depicted as a collection of statistical summaries.</p> <p>Useful when a component has to report multiple values for the same metric. E.g., a battery is a collection of several blocks, and each block has a temperature sensor. The battery can report a summary of the values provided by all these sensors, like, min, max, avg, etc., and if possible, the entire array of temperature values.</p> Field Type Label Description avg float The average value of the metric. min float optional The minimum value of the metric. max float optional The maximum value of the metric. raw_values float repeated The array of all the metric values. rated_bounds Bounds The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system. component_bounds Bounds The current bounds of the metric, as imposed by the component this metric originates from. system_exclusion_bounds Bounds These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &amp;lt;= lower</code> OR <code>upper &amp;lt;= value</code>. <p>It is important to note that these bounds work together with <code>system_inclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <code>inclusion.lower inclusion.upper &amp;lt;-------|============|------------------|============|---------&amp;gt; exclusion.lower exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted | | system_inclusion_bounds | Bounds |  | These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &amp;lt;= value &amp;lt;= upper</code></p> <p>It is important to note that these bounds work together with <code>system_exclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <code>inclusion.lower inclusion.upper &amp;lt;-------|============|------------------|============|---------&amp;gt; exclusion.lower exclusion.upper</code> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted |</p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/metrics/electrical.proto</p> <ul> <li>AC</li> <li>AC.ACPhase</li> <li>AC.ActiveEnergy</li> <li>AC.Harmonics</li> <li>AC.ReactiveEnergy</li> <li>DC</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#frequenzapicommonmetricselectricalproto","title":"frequenz/api/common/metrics/electrical.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#ac","title":"AC","text":"<p>The current state and metrics of the electrical connections to the inverter.</p> Field Type Label Description frequency frequenz.api.common.metrics.Metric The AC frequency. In Hertz (Hz). current frequenz.api.common.metrics.Metric The apparent 3-phase AC current. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Ampere (A). power_apparent frequenz.api.common.metrics.Metric The apparent 3-phase AC power. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Volt-Ampere (VA). power_active frequenz.api.common.metrics.Metric The total active 3-phase AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W). power_reactive frequenz.api.common.metrics.Metric The reactive 3-phase AC power. +ve power means inductive (leading). -ve power means capacitive (lagging). In Volt-Ampere reactive (VAr). energy_apparent frequenz.api.common.metrics.Metric The total 3-phase apparent energy. A positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour (VAh). energy_active AC.ActiveEnergy The total 3-phase active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh). energy_reactive AC.ReactiveEnergy The total 3-phase reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh). FIXME: ReactiveEnergy says Volt-Ampere-hour (VAh). harmonics_power_active AC.Harmonics The sums of the harmonics of the instantaneous active power at the component across all 3 phases. thd_power_active float The sums of the total harmonic distortion of the instantaneous active power at the component across all 3 phases. phase_1 AC.ACPhase AC metrics for phase/line 1. phase_2 AC.ACPhase AC metrics for phase/line 2. phase_3 AC.ACPhase AC metrics for phase/line 3. <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#acacphase","title":"AC.ACPhase","text":"<p>AC metrics of a single phase.</p> Field Type Label Description voltage frequenz.api.common.metrics.Metric The AC voltage between the line and the neutral wire. In Volt (V). current frequenz.api.common.metrics.Metric AC current. +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A). power_active frequenz.api.common.metrics.Metric AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W). power_reactive frequenz.api.common.metrics.Metric AC reactive power. +ve power means inductive (leading). -ve power means capacitive (lagging). In Volt-Ampere reactive (VAr). energy_apparent frequenz.api.common.metrics.Metric The total apparent energy. A Positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour (VAh). energy_active AC.ActiveEnergy The total active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh). energy_reactive AC.ReactiveEnergy The total reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh). harmonics_power_active AC.Harmonics Harmonics of the instantaneous active power at the component. In percent (%). thd_power_active float Total harmonic distortion of the instantaneous active power at the component. In percent (%). <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#acactiveenergy","title":"AC.ActiveEnergy","text":"<p>The active energy the inverter is consuming or generating.</p> Field Type Label Description energy frequenz.api.common.metrics.Metric The sum of the consumed and delivered energy. This is a signed value in passive sign convention: if more energy is consumed than delivered, this is a -ve number, otherwise +ve. In Watt-hour (Wh). energy_consumed frequenz.api.common.metrics.Metric The consumed energy. In Watt-hour (Wh). energy_delivered frequenz.api.common.metrics.Metric The delivered energy. In Watt-hour (Wh). <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#acharmonics","title":"AC.Harmonics","text":"<p>The harmonics of the fast Fourier transform of the instantaneous values and its total harmonic distortion. In percent (%).</p> Field Type Label Description harmonic_1 float harmonic_2 float harmonic_3 float harmonic_4 float harmonic_5 float harmonic_6 float harmonic_7 float harmonic_8 float harmonic_9 float harmonic_10 float harmonic_11 float <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#acreactiveenergy","title":"AC.ReactiveEnergy","text":"<p>The reactive energy the inverter is consuming or generating.</p> Field Type Label Description energy frequenz.api.common.metrics.Metric The sum of the capacitive and inductive energy. This is a signed value. If more energy is capacitive than inductive, this is a -ve number, otherwise +ve. In Volt-Ampere-hour (VArh). energy_capacitive frequenz.api.common.metrics.Metric The capacitive energy. In Volt-Ampere-hour (VArh). energy_inductive frequenz.api.common.metrics.Metric The inductive energy. In Volt-Ampere-hour (VArh). <p></p>"},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#dc","title":"DC","text":"<p>Metrics of a DC electrical connection.</p> Field Type Label Description voltage frequenz.api.common.metrics.Metric The DC voltage across the component. In Volt (V). current frequenz.api.common.metrics.Metric The DC current flowing away from the grid connection. In passive sign convention: +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A). power frequenz.api.common.metrics.Metric The DC power flowing away from the grid connection. In passive sign convention: +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W)."},{"location":"protobuf-reference/frequenz/api/common/metrics/electrical/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"python-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>common<ul> <li>components_pb2</li> <li>components_pb2_grpc</li> <li>location_pb2</li> <li>location_pb2_grpc</li> <li>metrics<ul> <li>electrical_pb2</li> <li>electrical_pb2_grpc</li> </ul> </li> <li>metrics_pb2</li> <li>metrics_pb2_grpc</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"python-reference/frequenz/api/common/","title":"common","text":""},{"location":"python-reference/frequenz/api/common/#frequenz.api.common","title":"<code>frequenz.api.common</code>","text":"<p>Frequenz common gRPC API and bindings.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/","title":"components_pb2","text":""},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2","title":"<code>frequenz.api.common.components_pb2</code>","text":"<p>Generated protocol buffer code.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.BATTERY_TYPE_LI_ION","title":"<code>frequenz.api.common.components_pb2.BATTERY_TYPE_LI_ION: BatteryType.ValueType</code>  <code>module-attribute</code>","text":"<p>Li-ion batteries.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.BATTERY_TYPE_NA_ION","title":"<code>frequenz.api.common.components_pb2.BATTERY_TYPE_NA_ION: BatteryType.ValueType</code>  <code>module-attribute</code>","text":"<p>Sodium-ion batteries</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.BATTERY_TYPE_UNSPECIFIED","title":"<code>frequenz.api.common.components_pb2.BATTERY_TYPE_UNSPECIFIED: BatteryType.ValueType</code>  <code>module-attribute</code>","text":"<p>Unspecified.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_BATTERY","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_BATTERY: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A storage system for electrical energy, used by inverters.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CHP","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CHP: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A heat and power combustion plant (CHP stands for combined heat and power).</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CONVERTER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CONVERTER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A DC-DC converter.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CRYPTO_MINER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_CRYPTO_MINER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A crypto miner.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_ELECTROLYZER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_ELECTROLYZER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>An electrolyzer for converting water into hydrogen and oxygen.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_EV_CHARGER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_EV_CHARGER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A station for charging electrical vehicles.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_GRID","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_GRID: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>The point where the local microgrid is connected to the grid.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_INVERTER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_INVERTER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>An electricity generator, with batteries or solar energy.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_METER","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_METER: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A meter, for measuring electrical metrics, e.g., current, voltage, etc.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_PRECHARGE_MODULE","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_PRECHARGE_MODULE: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A precharge module. Precharging involves gradually ramping up the DC voltage to prevent any potential damage to sensitive electrical components like capacitors. While many inverters and batteries come equipped with in-built precharging mechanisms, some may lack this feature. In such cases, we need to use external precharging modules.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_RELAY","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_RELAY: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A relay. Relays generally have two states: open (connected) and closed (disconnected). They are generally placed in front of a component, e.g., an inverter, to control whether the component is connected to the grid or not.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_SENSOR","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_SENSOR: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>A sensor for measuring ambient metrics, e.g., temperature, humidity, etc.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.COMPONENT_CATEGORY_UNSPECIFIED","title":"<code>frequenz.api.common.components_pb2.COMPONENT_CATEGORY_UNSPECIFIED: ComponentCategory.ValueType</code>  <code>module-attribute</code>","text":"<p>An unknown component categories, useful for error handling, and marking unknown components in a list of components with otherwise known categories.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.EV_CHARGER_TYPE_AC","title":"<code>frequenz.api.common.components_pb2.EV_CHARGER_TYPE_AC: EvChargerType.ValueType</code>  <code>module-attribute</code>","text":"<p>The EV charging station supports AC charging only.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.EV_CHARGER_TYPE_DC","title":"<code>frequenz.api.common.components_pb2.EV_CHARGER_TYPE_DC: EvChargerType.ValueType</code>  <code>module-attribute</code>","text":"<p>The EV charging station supports DC charging only.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.EV_CHARGER_TYPE_HYBRID","title":"<code>frequenz.api.common.components_pb2.EV_CHARGER_TYPE_HYBRID: EvChargerType.ValueType</code>  <code>module-attribute</code>","text":"<p>The EV charging station supports both AC and DC.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.EV_CHARGER_TYPE_UNSPECIFIED","title":"<code>frequenz.api.common.components_pb2.EV_CHARGER_TYPE_UNSPECIFIED: EvChargerType.ValueType</code>  <code>module-attribute</code>","text":"<p>Default type.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.INVERTER_TYPE_BATTERY","title":"<code>frequenz.api.common.components_pb2.INVERTER_TYPE_BATTERY: InverterType.ValueType</code>  <code>module-attribute</code>","text":"<p>Battery inverter.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.INVERTER_TYPE_HYBRID","title":"<code>frequenz.api.common.components_pb2.INVERTER_TYPE_HYBRID: InverterType.ValueType</code>  <code>module-attribute</code>","text":"<p>Hybrid inverter.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.INVERTER_TYPE_SOLAR","title":"<code>frequenz.api.common.components_pb2.INVERTER_TYPE_SOLAR: InverterType.ValueType</code>  <code>module-attribute</code>","text":"<p>Solar inverter.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.INVERTER_TYPE_UNSPECIFIED","title":"<code>frequenz.api.common.components_pb2.INVERTER_TYPE_UNSPECIFIED: InverterType.ValueType</code>  <code>module-attribute</code>","text":"<p>Unspecified.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_ACCELEROMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_ACCELEROMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Accelerometers (acceleration sensor).</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_ANEMOMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_ANEMOMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Anemometer (wind velocity and direction sensor).</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_BAROMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_BAROMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Barometer (pressure sensor).</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_GENERAL","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_GENERAL: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>General sensors, which do not fall in any of the above categories</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_HYGROMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_HYGROMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Hygrometer (humidity sensor)</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_PYRANOMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_PYRANOMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Pyranometer (solar irradiance sensor).</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_THERMOMETER","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_THERMOMETER: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Thermometer (temperature sensor)</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SENSOR_TYPE_UNSPECIFIED","title":"<code>frequenz.api.common.components_pb2.SENSOR_TYPE_UNSPECIFIED: SensorType.ValueType</code>  <code>module-attribute</code>","text":"<p>Unspecified</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.BatteryType","title":"<code>frequenz.api.common.components_pb2.BatteryType</code>","text":"<p>             Bases: <code>_BatteryType</code></p> <p>Enumerated battery types.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.ComponentCategory","title":"<code>frequenz.api.common.components_pb2.ComponentCategory</code>","text":"<p>             Bases: <code>_ComponentCategory</code></p> <p>Enumrated component categories.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.EvChargerType","title":"<code>frequenz.api.common.components_pb2.EvChargerType</code>","text":"<p>             Bases: <code>_EvChargerType</code></p> <p>Enumerated EV charger types.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.InverterType","title":"<code>frequenz.api.common.components_pb2.InverterType</code>","text":"<p>             Bases: <code>_InverterType</code></p> <p>Enumerated inverter types.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2/#frequenz.api.common.components_pb2.SensorType","title":"<code>frequenz.api.common.components_pb2.SensorType</code>","text":"<p>             Bases: <code>_SensorType</code></p> <p>Enumerated sensor types.</p>"},{"location":"python-reference/frequenz/api/common/components_pb2_grpc/","title":"components_pb2_grpc","text":""},{"location":"python-reference/frequenz/api/common/components_pb2_grpc/#frequenz.api.common.components_pb2_grpc","title":"<code>frequenz.api.common.components_pb2_grpc</code>","text":"<p>Client and server classes corresponding to protobuf-defined services.</p>"},{"location":"python-reference/frequenz/api/common/location_pb2/","title":"location_pb2","text":""},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2","title":"<code>frequenz.api.common.location_pb2</code>","text":"<p>Generated protocol buffer code.</p>"},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2.Location","title":"<code>frequenz.api.common.location_pb2.Location</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>A pair of geographical co-ordinates, representing the location of a place.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/frequenz/api/common/location_pb2.py</code> <pre><code>  DESCRIPTOR._options = None\n_globals['_LOCATION']._serialized_start=68\n_globals['_LOCATION']._serialized_end=137\n# @@protoc_insertion_point(module_scope)\n</code></pre>"},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2.Location-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2.Location.country_code","title":"<code>country_code: builtins.str</code>  <code>instance-attribute</code>","text":"<p>Country ISO 3166-1 Alpha 2</p>"},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2.Location.latitude","title":"<code>latitude: builtins.float</code>  <code>instance-attribute</code>","text":"<p>Latitude ranges from -90 (South) to 90 (North)</p>"},{"location":"python-reference/frequenz/api/common/location_pb2/#frequenz.api.common.location_pb2.Location.longitude","title":"<code>longitude: builtins.float</code>  <code>instance-attribute</code>","text":"<p>Longitude ranges from -180 (West) to 180 (East)</p>"},{"location":"python-reference/frequenz/api/common/location_pb2_grpc/","title":"location_pb2_grpc","text":""},{"location":"python-reference/frequenz/api/common/location_pb2_grpc/#frequenz.api.common.location_pb2_grpc","title":"<code>frequenz.api.common.location_pb2_grpc</code>","text":"<p>Client and server classes corresponding to protobuf-defined services.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/","title":"metrics_pb2","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2","title":"<code>frequenz.api.common.metrics_pb2</code>","text":"<p>Generated protocol buffer code.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Bounds","title":"<code>frequenz.api.common.metrics_pb2.Bounds</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>A set of lower and upper bounds for any metric. The units of the bounds are always the same as the related metric.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/frequenz/api/common/metrics_pb2.py</code> <pre><code>  _globals['_METRIC']._serialized_end=392\n_globals['_METRICAGGREGATION']._serialized_start=395\n_globals['_METRICAGGREGATION']._serialized_end=761\n# @@protoc_insertion_point(module_scope)\n</code></pre>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Bounds-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Bounds.lower","title":"<code>lower: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The lower bound.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Bounds.upper","title":"<code>upper: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The upper bound.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric","title":"<code>frequenz.api.common.metrics_pb2.Metric</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>A metric's value, with optional limits.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric.component_bounds","title":"<code>component_bounds: global___Bounds</code>  <code>property</code>","text":"<p>The current bounds of the metric, as imposed by the component this metric originates from.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric.rated_bounds","title":"<code>rated_bounds: global___Bounds</code>  <code>property</code>","text":"<p>The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric.system_exclusion_bounds","title":"<code>system_exclusion_bounds: global___Bounds</code>  <code>property</code>","text":"<p>These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &lt;= lower</code> OR <code>upper &lt;= value</code>.</p> <p>It is important to note that these bounds work together with <code>system_inclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <pre><code>  inclusion.lower                              inclusion.upper\n&lt;-------|============|------------------|============|---------&gt;\n               exclusion.lower    exclusion.upper\n</code></pre> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric.system_inclusion_bounds","title":"<code>system_inclusion_bounds: global___Bounds</code>  <code>property</code>","text":"<p>These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &lt;= value &lt;= upper</code></p> <p>It is important to note that these bounds work together with <code>system_exclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <pre><code>  inclusion.lower                              inclusion.upper\n&lt;-------|============|------------------|============|---------&gt;\n               exclusion.lower    exclusion.upper\n</code></pre> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.Metric.value","title":"<code>value: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The current value of the metric.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation","title":"<code>frequenz.api.common.metrics_pb2.MetricAggregation</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>Metrics depicted as a collection of statistical summaries.</p> <p>Useful when a component has to report multiple values for the same metric. E.g., a battery is a collection of several blocks, and each block has a temperature sensor. The battery can report a summary of the values provided by all these sensors, like, min, max, avg, etc., and if possible, the entire array of temperature values.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.avg","title":"<code>avg: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The average value of the metric.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.component_bounds","title":"<code>component_bounds: global___Bounds</code>  <code>property</code>","text":"<p>The current bounds of the metric, as imposed by the component this metric originates from.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.max","title":"<code>max: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The maximum value of the metric.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.min","title":"<code>min: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The minimum value of the metric.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.rated_bounds","title":"<code>rated_bounds: global___Bounds</code>  <code>property</code>","text":"<p>The manufacturer's rated bounds of the metric. This may differ from <code>system_bounds</code> as it does not take into account the current state of the overall system.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.raw_values","title":"<code>raw_values: google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]</code>  <code>property</code>","text":"<p>The array of all the metric values.</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.system_exclusion_bounds","title":"<code>system_exclusion_bounds: global___Bounds</code>  <code>property</code>","text":"<p>These bounds indicate the range of values that are disallowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraints <code>value &lt;= lower</code> OR <code>upper &lt;= value</code>.</p> <p>It is important to note that these bounds work together with <code>system_inclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <pre><code>  inclusion.lower                              inclusion.upper\n&lt;-------|============|------------------|============|---------&gt;\n               exclusion.lower    exclusion.upper\n</code></pre> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2/#frequenz.api.common.metrics_pb2.MetricAggregation.system_inclusion_bounds","title":"<code>system_inclusion_bounds: global___Bounds</code>  <code>property</code>","text":"<p>These bounds indicate the range of values that are allowed for the metric. If these bounds for a metric are [<code>lower</code>, <code>upper</code>], then this metric's <code>value</code> needs to comply with the constraint <code>lower &lt;= value &lt;= upper</code></p> <p>It is important to note that these bounds work together with <code>system_exclusion_bounds</code>.</p> <p>E.g., for the system to accept a charge command, clients need to request power values within the bounds <code>[system_inclusion_bounds.lower, system_exclusion_bounds.lower]</code>. This means that clients can only request charge commands with power values that are within the <code>system_inclusion_bounds</code>, but not within <code>system_exclusion_bounds</code>. Similarly, for the system to accept a discharge command, clients need to request power values within the bounds <code>[system_exclusion_bounds.upper, system_inclusion_bounds.upper]</code>.</p> <p>The following diagram illustrates the relationship between the bounds. <pre><code>  inclusion.lower                              inclusion.upper\n&lt;-------|============|------------------|============|---------&gt;\n               exclusion.lower    exclusion.upper\n</code></pre> ---- values here are disallowed and wil be rejected ==== vales here are allowed and will be accepted</p>"},{"location":"python-reference/frequenz/api/common/metrics_pb2_grpc/","title":"metrics_pb2_grpc","text":""},{"location":"python-reference/frequenz/api/common/metrics_pb2_grpc/#frequenz.api.common.metrics_pb2_grpc","title":"<code>frequenz.api.common.metrics_pb2_grpc</code>","text":"<p>Client and server classes corresponding to protobuf-defined services.</p>"},{"location":"python-reference/frequenz/api/common/metrics/","title":"metrics","text":""},{"location":"python-reference/frequenz/api/common/metrics/#frequenz.api.common.metrics","title":"<code>frequenz.api.common.metrics</code>","text":"<p>Frequenz Common API definitions for metrics.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/","title":"electrical_pb2","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2","title":"<code>frequenz.api.common.metrics.electrical_pb2</code>","text":"<p>Generated protocol buffer code.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC","title":"<code>frequenz.api.common.metrics.electrical_pb2.AC</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>The current state and metrics of the electrical connections to the inverter.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.current","title":"<code>current: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The apparent 3-phase AC current. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Ampere (A).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.energy_active","title":"<code>energy_active: global___AC.ActiveEnergy</code>  <code>property</code>","text":"<p>The total 3-phase active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.energy_apparent","title":"<code>energy_apparent: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The total 3-phase apparent energy. A positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour (VAh).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.energy_reactive","title":"<code>energy_reactive: global___AC.ReactiveEnergy</code>  <code>property</code>","text":"<p>The total 3-phase reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh). FIXME: ReactiveEnergy says Volt-Ampere-hour (VAh).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.frequency","title":"<code>frequency: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>Overall AC metrics.</p> <p>The AC frequency. In Hertz (Hz).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.harmonics_power_active","title":"<code>harmonics_power_active: global___AC.Harmonics</code>  <code>property</code>","text":"<p>The sums of the harmonics of the instantaneous active power at the component across all 3 phases.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.phase_1","title":"<code>phase_1: global___AC.ACPhase</code>  <code>property</code>","text":"<p>AC metrics for phase/line 1.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.phase_2","title":"<code>phase_2: global___AC.ACPhase</code>  <code>property</code>","text":"<p>AC metrics for phase/line 2.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.phase_3","title":"<code>phase_3: global___AC.ACPhase</code>  <code>property</code>","text":"<p>AC metrics for phase/line 3.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.power_active","title":"<code>power_active: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The total active 3-phase AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.power_apparent","title":"<code>power_apparent: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The apparent 3-phase AC power. Positive values represent apparent energy flowing towards the grid connection, and vice versa. In Volt-Ampere (VA).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.power_reactive","title":"<code>power_reactive: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The reactive 3-phase AC power. +ve power means inductive (leading). -ve power means capacitive (lagging). In Volt-Ampere reactive (VAr).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.thd_power_active","title":"<code>thd_power_active: builtins.float</code>  <code>instance-attribute</code>","text":"<p>The sums of the total harmonic distortion of the instantaneous active power at the component across all 3 phases.</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC-classes","title":"Classes","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.ACPhase","title":"<code>ACPhase</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>AC metrics of a single phase.</p> Attributes\u00a4 <code>current: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>AC current. +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A).</p> <code>energy_active: global___AC.ActiveEnergy</code> <code>property</code> \u00a4 <p>The total active energy counters for the underlying component's consumption and supply. In Watt-hour (Wh).</p> <code>energy_apparent: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The total apparent energy. A Positive value represents the net apparent energy supplied to the grid connection, and vice versa. In Volt-Ampere-hour (VAh).</p> <code>energy_reactive: global___AC.ReactiveEnergy</code> <code>property</code> \u00a4 <p>The total reactive energy counters for the underlying component's capacitive and inductive energy values. In Volt-Ampere reactive hour (VArh).</p> <code>harmonics_power_active: global___AC.Harmonics</code> <code>property</code> \u00a4 <p>Harmonics of the instantaneous active power at the component. In percent (%).</p> <code>power_active: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>AC active power. +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p> <code>power_reactive: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>AC reactive power. +ve power means inductive (leading). -ve power means capacitive (lagging). In Volt-Ampere reactive (VAr).</p> <code>thd_power_active: builtins.float</code> <code>instance-attribute</code> \u00a4 <p>Total harmonic distortion of the instantaneous active power at the component. In percent (%).</p> <code>voltage: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The AC voltage between the line and the neutral wire. In Volt (V).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.ActiveEnergy","title":"<code>ActiveEnergy</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>The active energy the inverter is consuming or generating.</p> Attributes\u00a4 <code>energy: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The sum of the consumed and delivered energy. This is a signed value in passive sign convention: if more energy is consumed than delivered, this is a -ve number, otherwise +ve. In Watt-hour (Wh).</p> <code>energy_consumed: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The consumed energy. In Watt-hour (Wh).</p> <code>energy_delivered: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The delivered energy. In Watt-hour (Wh).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.Harmonics","title":"<code>Harmonics</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>The harmonics of the fast Fourier transform of the instantaneous values and its total harmonic distortion. In percent (%).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.AC.ReactiveEnergy","title":"<code>ReactiveEnergy</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>The reactive energy the inverter is consuming or generating.</p> Attributes\u00a4 <code>energy: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The sum of the capacitive and inductive energy. This is a signed value. If more energy is capacitive than inductive, this is a -ve number, otherwise +ve. In Volt-Ampere-hour (VArh).</p> <code>energy_capacitive: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The capacitive energy. In Volt-Ampere-hour (VArh).</p> <code>energy_inductive: frequenz.api.common.metrics_pb2.Metric</code> <code>property</code> \u00a4 <p>The inductive energy. In Volt-Ampere-hour (VArh).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.DC","title":"<code>frequenz.api.common.metrics.electrical_pb2.DC</code>","text":"<p>             Bases: <code>google.protobuf.message.Message</code></p> <p>Metrics of a DC electrical connection.</p> Source code in <code>/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/frequenz/api/common/metrics/electrical_pb2.py</code> <pre><code>  _globals['_DC']._serialized_start=124\n_globals['_DC']._serialized_end=288\n_globals['_AC']._serialized_start=291\n_globals['_AC']._serialized_end=2339\n_globals['_AC_ACTIVEENERGY']._serialized_start=1134\n_globals['_AC_ACTIVEENERGY']._serialized_end=1326\n_globals['_AC_REACTIVEENERGY']._serialized_start=1329\n_globals['_AC_REACTIVEENERGY']._serialized_end=1525\n_globals['_AC_HARMONICS']._serialized_start=1528\n_globals['_AC_HARMONICS']._serialized_end=1761\n_globals['_AC_ACPHASE']._serialized_start=1764\n_globals['_AC_ACPHASE']._serialized_end=2339\n# @@protoc_insertion_point(module_scope)\n</code></pre>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.DC-attributes","title":"Attributes","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.DC.current","title":"<code>current: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The DC current flowing away from the grid connection. In passive sign convention: +ve current means consumption, away from the grid. -ve current means supply into the grid. In Ampere (A).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.DC.power","title":"<code>power: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The DC power flowing away from the grid connection. In passive sign convention: +ve power means consumption, away from the grid. -ve power means supply into the grid. In Watt (W).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2/#frequenz.api.common.metrics.electrical_pb2.DC.voltage","title":"<code>voltage: frequenz.api.common.metrics_pb2.Metric</code>  <code>property</code>","text":"<p>The DC voltage across the component. In Volt (V).</p>"},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2_grpc/","title":"electrical_pb2_grpc","text":""},{"location":"python-reference/frequenz/api/common/metrics/electrical_pb2_grpc/#frequenz.api.common.metrics.electrical_pb2_grpc","title":"<code>frequenz.api.common.metrics.electrical_pb2_grpc</code>","text":"<p>Client and server classes corresponding to protobuf-defined services.</p>"}]}